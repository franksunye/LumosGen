// Demo test to simulate LumosGen functionality without VS Code
const fs = require('fs');
const path = require('path');

console.log('🔮 LumosGen Demo Test\n');

// Simulate the mock AI client functionality
function generateMockContent(files) {
  const contextSummary = files.map(file => 
    `- **${file.name}**: ${file.content.substring(0, 100)}...`
  ).join('\n');

  const content = `# LumosGen Content Summary

Generated on: ${new Date().toLocaleString()}

## Files Analyzed
${contextSummary}

## Summary
This is a mock summary of the analyzed files. The content includes ${files.length} file(s) with various topics and information.

## Key Points
- Total files processed: ${files.length}
- Last update: ${new Date().toLocaleString()}
- Generated by: LumosGen AI Assistant

---
*This content was automatically generated by LumosGen.*`;

  return content;
}

// Test the core logic
async function runDemo() {
  try {
    console.log('1️⃣ Scanning for Markdown files...');
    
    // Find all .md files (excluding output file)
    const files = fs.readdirSync('.')
      .filter(file => file.endsWith('.md') && file !== 'LumosGen-Summary.md')
      .map(file => {
        const content = fs.readFileSync(file, 'utf8');
        return {
          name: file,
          content: content,
          size: content.length
        };
      });

    console.log(`📁 Found ${files.length} Markdown files:`);
    files.forEach(file => {
      console.log(`   - ${file.name} (${file.size} chars)`);
    });

    console.log('\n2️⃣ Generating content with mock AI...');
    
    // Simulate AI processing delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const generatedContent = generateMockContent(files);
    
    console.log('✅ Content generated successfully!');
    console.log('\n3️⃣ Writing to output file...');
    
    // Add metadata header
    const metadata = `<!--
LumosGen Metadata:
- Generated: ${new Date().toISOString()}
- Model: mock-model
- Template: summary
- Files processed: ${files.length}
-->

`;
    
    const finalContent = metadata + generatedContent;
    
    // Write to output file
    fs.writeFileSync('LumosGen-Summary.md', finalContent);
    
    console.log('✅ Content written to LumosGen-Summary.md');
    
    console.log('\n4️⃣ Verifying output...');
    
    if (fs.existsSync('LumosGen-Summary.md')) {
      const outputSize = fs.statSync('LumosGen-Summary.md').size;
      console.log(`📄 Output file created successfully (${outputSize} bytes)`);
      
      console.log('\n📄 Content preview:');
      console.log('─'.repeat(50));
      const preview = fs.readFileSync('LumosGen-Summary.md', 'utf8');
      console.log(preview.substring(0, 400) + '...');
      console.log('─'.repeat(50));
    }
    
    console.log('\n🎉 Demo test completed successfully!');
    console.log('\n📋 Test Summary:');
    console.log(`   ✅ File scanning: ${files.length} files found`);
    console.log(`   ✅ Content generation: Mock AI working`);
    console.log(`   ✅ File writing: Output created`);
    console.log(`   ✅ Metadata: Headers added`);
    
    console.log('\n🚀 Ready for VS Code testing!');
    console.log('   1. Press F5 in VS Code to launch Extension Development Host');
    console.log('   2. Create/edit a .md file and save it');
    console.log('   3. Watch LumosGen generate content automatically');
    
  } catch (error) {
    console.error('❌ Demo test failed:', error.message);
  }
}

runDemo();
