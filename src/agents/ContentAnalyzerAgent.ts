/**
 * Content Analyzer Agent with Advanced Context Engineering
 * 
 * This agent leverages the context engineering system for superior
 * content strategy analysis with intelligent document selection and processing.
 */

import { BaseAgent, AgentResult, AgentContext } from './AgentSystem';
import { ProjectAnalysis } from '../analysis/ProjectAnalyzer';
import { ContextSelector, AITaskType, SelectedContext } from '../analysis/ContextSelector';

// üìä ÂÜÖÂÆπÂàÜÊûêAgent
export class ContentAnalyzerAgent extends BaseAgent {
    private contextSelector: ContextSelector;

    constructor() {
        super(
            'ContentAnalyzer',
            'Advanced Content Strategy Analyst',
            'Create sophisticated content strategies using comprehensive project context',
            `Expert content strategist with access to complete project documentation.
            Leverages advanced context engineering to identify content gaps, opportunities,
            and create data-driven content strategies for technical audiences.`
        );

        this.contextSelector = new ContextSelector();
    }

    async execute(input: any, context: AgentContext): Promise<AgentResult> {
        try {
            const { projectAnalysis, existingContent, targetAudience, contentType = 'marketing-content' } = input;

            // ÈÄâÊã©ÈÄÇÂêàÂÜÖÂÆπÂàÜÊûêÁöÑ‰∏ä‰∏ãÊñá
            const selectedContext = this.contextSelector.selectContext(projectAnalysis, contentType as AITaskType);

            // ÁîüÊàêÂÜÖÂÆπÁ≠ñÁï•ÊèêÁ§∫
            const prompt = this.generateContentStrategyPrompt(projectAnalysis, selectedContext, existingContent, targetAudience);

            const response = await this.callLLM(prompt, context);
            const strategy = this.parseContentStrategy(response, selectedContext);

            return {
                success: true,
                data: strategy,
                metadata: {
                    executionTime: 0,
                    confidence: this.calculateStrategyConfidence(strategy),
                    contextDocuments: selectedContext.selectedFiles.length,
                    totalTokens: selectedContext.totalTokens,
                    taskType: contentType
                }
            };

        } catch (error) {
            return {
                success: false,
                data: null,
                error: error instanceof Error ? error.message : 'Content analysis failed'
            };
        }
    }

    private generateContentStrategyPrompt(
        projectAnalysis: ProjectAnalysis,
        selectedContext: SelectedContext,
        existingContent: string,
        targetAudience: string
    ): string {
        const documentContext = selectedContext.selectedFiles
            .map(file => `### ${file.category.toUpperCase()}: ${file.path}\n${file.content.substring(0, 1000)}${file.content.length > 1000 ? '...' : ''}`)
            .join('\n\n');

        return `
# ÂÜÖÂÆπÁ≠ñÁï•ÂàÜÊûê

## È°πÁõÆÊ¶ÇËßà
**ÂêçÁß∞**: ${projectAnalysis.metadata.name}
**ÊèèËø∞**: ${projectAnalysis.metadata.description}
**ÊäÄÊúØÊ†à**: ${projectAnalysis.techStack.map(t => t.language).join(', ')}
**ÁõÆÊ†áÂèó‰ºó**: ${targetAudience}

## Áé∞ÊúâÂÜÖÂÆπÂàÜÊûê
${existingContent || 'ÊöÇÊó†Áé∞ÊúâÂÜÖÂÆπ'}

## È°πÁõÆÊñáÊ°£‰∏ä‰∏ãÊñá (${selectedContext.selectedFiles.length}‰∏™ÊñáÊ°£)
${selectedContext.selectionReason}

${documentContext}

## ÂÜÖÂÆπÁ≠ñÁï•Ë¶ÅÊ±Ç

Âü∫‰∫éÂÆåÊï¥ÁöÑÈ°πÁõÆ‰ø°ÊÅØÂíåÊñáÊ°£ÂàÜÊûêÔºåËØ∑Âà∂ÂÆöÔºö

### 1. ÂÜÖÂÆπÂ∑ÆË∑ùÂàÜÊûê
- ËØÜÂà´ÂΩìÂâçÂÜÖÂÆπÁöÑ‰∏çË∂≥‰πãÂ§Ñ
- ÂàÜÊûêÁ´û‰∫âÂØπÊâãÂèØËÉΩÁöÑ‰ºòÂäø
- Á°ÆÂÆöÊÄ•ÈúÄË°•ÂÖÖÁöÑÂÜÖÂÆπÁ±ªÂûã

### 2. ÂÜÖÂÆπ‰ºòÂÖàÁ∫ßÁü©Èòµ
- È´òÂΩ±ÂìçÂäõ„ÄÅ‰ΩéÊàêÊú¨ÁöÑÂø´ÈÄüËÉúÂà©ÂÜÖÂÆπ
- È´òÂΩ±ÂìçÂäõ„ÄÅÈ´òÊàêÊú¨ÁöÑÊàòÁï•ÊÄßÂÜÖÂÆπ
- ÂÜÖÂÆπÊõ¥Êñ∞ÁöÑÊó∂Èó¥Á∫øÂª∫ËÆÆ

### 3. Âèó‰ºóÁªÜÂàÜÁ≠ñÁï•
- ‰∏ªË¶ÅÂèó‰ºóÁæ§‰ΩìÁâπÂæÅÂàÜÊûê
- ‰∏çÂêåÂèó‰ºóÁöÑÂÜÖÂÆπÂÅèÂ•Ω
- ‰∏™ÊÄßÂåñÂÜÖÂÆπÂª∫ËÆÆ

### 4. SEOÂíåÂèëÁé∞ÊÄß‰ºòÂåñ
- ÂÖ≥ÈîÆËØçÊú∫‰ºöËØÜÂà´
- ÂÜÖÂÆπÁªìÊûÑ‰ºòÂåñÂª∫ËÆÆ
- ÊêúÁ¥¢ÊÑèÂõæÂåπÈÖçÁ≠ñÁï•

### 5. ËΩ¨ÂåñË∑ØÂæÑËÆæËÆ°
- Áî®Êà∑ÊóÖÁ®ãÊò†Â∞Ñ
- ÂÜÖÂÆπÊºèÊñóËÆæËÆ°
- CTAÁ≠ñÁï•Âíå‰ΩçÁΩÆÂª∫ËÆÆ

### 6. ÂÜÖÂÆπÊ†ºÂºèÂíåÊ∏†ÈÅìÁ≠ñÁï•
- ÊúÄÈÄÇÂêàÁöÑÂÜÖÂÆπÊ†ºÂºè
- ÂàÜÂèëÊ∏†ÈÅìÂª∫ËÆÆ
- Ë∑®Âπ≥Âè∞ÂÜÖÂÆπÈÄÇÈÖç

ËØ∑Êèê‰æõÂÖ∑‰Ωì„ÄÅÂèØÊâßË°åÁöÑÁ≠ñÁï•Âª∫ËÆÆ„ÄÇ
`;
    }

    private parseContentStrategy(response: string, context: SelectedContext): any {
        return {
            // Ê†∏ÂøÉÁ≠ñÁï•ÁªÑ‰ª∂
            contentGaps: this.extractContentGaps(response),
            priorityMatrix: this.extractPriorityMatrix(response),
            audienceSegmentation: this.extractAudienceSegmentation(response),
            seoStrategy: this.extractSEOStrategy(response),
            conversionPath: this.extractConversionPath(response),
            contentFormats: this.extractContentFormats(response),

            // ‰∏ä‰∏ãÊñáÂàÜÊûê
            contextInsights: {
                documentTypes: this.analyzeDocumentTypes(context.selectedFiles),
                contentQuality: this.assessContentQuality(context.selectedFiles),
                technicalDepth: this.assessTechnicalDepth(context.selectedFiles)
            },

            // ÊâßË°åÂª∫ËÆÆ
            actionPlan: this.generateActionPlan(response),
            timeline: this.extractTimeline(response),
            resources: this.extractResourceRequirements(response),

            // ÂÖÉÊï∞ÊçÆ
            rawStrategy: response,
            contextUsed: context
        };
    }

    private extractContentGaps(text: string): string[] {
        const section = this.extractSection(text, 'ÂÜÖÂÆπÂ∑ÆË∑ùÂàÜÊûê');
        return this.extractListItems(section);
    }

    private extractPriorityMatrix(text: string): any {
        const section = this.extractSection(text, 'ÂÜÖÂÆπ‰ºòÂÖàÁ∫ßÁü©Èòµ');
        return {
            quickWins: this.extractSubsectionItems(section, 'Âø´ÈÄüËÉúÂà©'),
            strategic: this.extractSubsectionItems(section, 'ÊàòÁï•ÊÄß'),
            timeline: this.extractSubsectionItems(section, 'Êó∂Èó¥Á∫ø')
        };
    }

    private extractAudienceSegmentation(text: string): any {
        const section = this.extractSection(text, 'Âèó‰ºóÁªÜÂàÜÁ≠ñÁï•');
        return {
            primaryAudience: this.extractSubsectionItems(section, '‰∏ªË¶ÅÂèó‰ºó'),
            preferences: this.extractSubsectionItems(section, 'ÂÜÖÂÆπÂÅèÂ•Ω'),
            personalization: this.extractSubsectionItems(section, '‰∏™ÊÄßÂåñ')
        };
    }

    private extractSEOStrategy(text: string): any {
        const section = this.extractSection(text, 'SEOÂíåÂèëÁé∞ÊÄß‰ºòÂåñ');
        return {
            keywords: this.extractSubsectionItems(section, 'ÂÖ≥ÈîÆËØç'),
            structure: this.extractSubsectionItems(section, 'ÁªìÊûÑ‰ºòÂåñ'),
            searchIntent: this.extractSubsectionItems(section, 'ÊêúÁ¥¢ÊÑèÂõæ')
        };
    }

    private extractConversionPath(text: string): any {
        const section = this.extractSection(text, 'ËΩ¨ÂåñË∑ØÂæÑËÆæËÆ°');
        return {
            userJourney: this.extractSubsectionItems(section, 'Áî®Êà∑ÊóÖÁ®ã'),
            contentFunnel: this.extractSubsectionItems(section, 'ÂÜÖÂÆπÊºèÊñó'),
            ctaStrategy: this.extractSubsectionItems(section, 'CTAÁ≠ñÁï•')
        };
    }

    private extractContentFormats(text: string): string[] {
        const section = this.extractSection(text, 'ÂÜÖÂÆπÊ†ºÂºèÂíåÊ∏†ÈÅìÁ≠ñÁï•');
        return this.extractListItems(section);
    }

    private extractSection(text: string, sectionName: string): string {
        const regex = new RegExp(`${sectionName}[\\s\\S]*?(?=###|$)`, 'i');
        const match = text.match(regex);
        return match ? match[0] : '';
    }

    private extractSubsectionItems(text: string, subsectionName: string): string[] {
        const regex = new RegExp(`${subsectionName}[\\s\\S]*?(?=-|$)`, 'i');
        const match = text.match(regex);
        if (!match) return [];

        return this.extractListItems(match[0]);
    }

    private extractListItems(text: string): string[] {
        const lines = text.split('\n');
        return lines
            .filter(line => line.trim().match(/^[-*‚Ä¢]\s+/))
            .map(line => line.replace(/^[-*‚Ä¢]\s+/, '').trim())
            .filter(item => item.length > 0);
    }

    private analyzeDocumentTypes(files: any[]): Record<string, number> {
        const types: Record<string, number> = {};
        files.forEach(file => {
            types[file.category] = (types[file.category] || 0) + 1;
        });
        return types;
    }

    private assessContentQuality(files: any[]): number {
        if (files.length === 0) return 0;

        const avgPriority = files.reduce((sum, file) => sum + file.priority, 0) / files.length;
        const avgTokens = files.reduce((sum, file) => sum + file.tokenCount, 0) / files.length;

        // Âü∫‰∫é‰ºòÂÖàÁ∫ßÂíåÂÜÖÂÆπÈïøÂ∫¶ËØÑ‰º∞Ë¥®Èáè
        return Math.round((avgPriority * 0.7) + (Math.min(avgTokens / 100, 30) * 0.3));
    }

    private assessTechnicalDepth(files: any[]): number {
        const technicalCategories = ['api', 'docs', 'config'];
        const technicalFiles = files.filter(file => technicalCategories.includes(file.category));

        if (files.length === 0) return 0;

        const technicalRatio = technicalFiles.length / files.length;
        const avgTechnicalPriority = technicalFiles.length > 0
            ? technicalFiles.reduce((sum, file) => sum + file.priority, 0) / technicalFiles.length
            : 0;

        return Math.round((technicalRatio * 50) + (avgTechnicalPriority * 0.5));
    }

    private generateActionPlan(text: string): string[] {
        // ‰ªéÁ≠ñÁï•ÊñáÊú¨‰∏≠ÊèêÂèñÂèØÊâßË°åÁöÑË°åÂä®È°π
        const lines = text.split('\n');
        return lines
            .filter(line => line.includes('Âª∫ËÆÆ') || line.includes('Â∫îËØ•') || line.includes('ÈúÄË¶Å'))
            .map(line => line.trim())
            .slice(0, 8);
    }

    private extractTimeline(text: string): string[] {
        const timelineSection = this.extractSection(text, 'Êó∂Èó¥Á∫ø');
        return this.extractListItems(timelineSection);
    }

    private extractResourceRequirements(text: string): string[] {
        // ÊèêÂèñËµÑÊ∫êÈúÄÊ±Ç
        const lines = text.split('\n');
        return lines
            .filter(line => line.includes('ËµÑÊ∫ê') || line.includes('‰∫∫Âëò') || line.includes('Â∑•ÂÖ∑'))
            .map(line => line.trim())
            .slice(0, 5);
    }

    private calculateStrategyConfidence(strategy: any): number {
        let confidence = 65; // Âü∫Á°ÄÁΩÆ‰ø°Â∫¶

        if (strategy.contentGaps.length > 2) confidence += 10;
        if (strategy.priorityMatrix.quickWins.length > 0) confidence += 8;
        if (strategy.seoStrategy.keywords.length > 0) confidence += 7;
        if (strategy.conversionPath.userJourney.length > 0) confidence += 5;
        if (strategy.contextInsights.contentQuality > 60) confidence += 5;

        return Math.min(90, confidence);
    }
}
