import { GeneratedContent } from '../content/MarketingContentGenerator';
import { ProjectAnalysis } from '../analysis/ProjectAnalyzer';

export class SEOOptimizer {
    generateSitemap(pages: string[], siteName: string): string {
        const baseUrl = `https://${siteName.toLowerCase().replace(/\s+/g, '-')}.github.io`;
        const currentDate = new Date().toISOString().split('T')[0];
        
        const urlEntries = pages.map(page => {
            const url = page === 'index.html' ? baseUrl : `${baseUrl}/${page}`;
            const priority = page === 'index.html' ? '1.0' : '0.8';
            
            return `  <url>
    <loc>${url}</loc>
    <lastmod>${currentDate}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>${priority}</priority>
  </url>`;
        }).join('\n');

        return `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${urlEntries}
</urlset>`;
    }

    generateRobotsTxt(): string {
        // Generate robots.txt file for search engine optimization
        return `User-agent: *
Allow: /

Sitemap: /sitemap.xml

# Generated by LumosGen
# Optimized for search engine crawling`;
    }

    generateManifest(metadata: GeneratedContent['metadata'], analysis: ProjectAnalysis): string {
        const manifest = {
            name: metadata.title,
            short_name: analysis.metadata.name,
            description: metadata.description,
            start_url: "/",
            display: "standalone",
            background_color: "#ffffff",
            theme_color: "#3b82f6",
            orientation: "portrait-primary",
            icons: [
                {
                    src: "/favicon.ico",
                    sizes: "16x16 32x32 48x48",
                    type: "image/x-icon"
                }
            ],
            categories: ["productivity", "developer-tools"],
            lang: metadata.language,
            dir: "ltr"
        };

        return JSON.stringify(manifest, null, 2);
    }

    generateStructuredData(metadata: GeneratedContent['metadata'], analysis: ProjectAnalysis): string {
        // Generate JSON-LD structured data for SEO
        const structuredData = {
            "@context": "https://schema.org",
            "@type": "SoftwareApplication",
            "name": metadata.title,
            "description": metadata.description,
            "applicationCategory": "DeveloperApplication",
            "operatingSystem": "Cross-platform",
            "author": {
                "@type": "Person",
                "name": metadata.author
            },
            "programmingLanguage": analysis.techStack.map(tech => tech.language),
            "codeRepository": `https://github.com/${metadata.author}/${analysis.metadata.name}`,
            "license": "MIT",
            "keywords": metadata.keywords.join(", "),
            "dateCreated": new Date().toISOString(),
            "dateModified": new Date().toISOString(),
            "version": analysis.metadata.version || "1.0.0",
            "offers": {
                "@type": "Offer",
                "price": "0",
                "priceCurrency": "USD"
            }
        };

        return JSON.stringify(structuredData, null, 2);
    }

    generateMetaTags(metadata: GeneratedContent['metadata'], analysis: ProjectAnalysis): string[] {
        const tags = [
            `<meta name="description" content="${metadata.description}">`,
            `<meta name="keywords" content="${metadata.keywords.join(', ')}">`,
            `<meta name="author" content="${metadata.author}">`,
            `<meta name="robots" content="index, follow">`,
            `<meta name="language" content="${metadata.language}">`,
            
            // Open Graph tags
            `<meta property="og:type" content="website">`,
            `<meta property="og:title" content="${metadata.title}">`,
            `<meta property="og:description" content="${metadata.description}">`,
            `<meta property="og:site_name" content="${analysis.metadata.name}">`,
            `<meta property="og:locale" content="${metadata.language}_US">`,
            
            // Twitter Card tags
            `<meta name="twitter:card" content="summary_large_image">`,
            `<meta name="twitter:title" content="${metadata.title}">`,
            `<meta name="twitter:description" content="${metadata.description}">`,
            
            // Additional SEO tags
            `<meta name="theme-color" content="#3b82f6">`,
            `<meta name="msapplication-TileColor" content="#3b82f6">`,
            `<meta name="apple-mobile-web-app-capable" content="yes">`,
            `<meta name="apple-mobile-web-app-status-bar-style" content="default">`,
            `<meta name="apple-mobile-web-app-title" content="${analysis.metadata.name}">`,
            
            // Canonical URL
            `<link rel="canonical" href="https://${analysis.metadata.name.toLowerCase().replace(/\s+/g, '-')}.github.io">`,
            
            // Preconnect for performance
            `<link rel="preconnect" href="https://fonts.googleapis.com">`,
            `<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>`,
            
            // DNS prefetch for external resources
            `<link rel="dns-prefetch" href="//cdn.tailwindcss.com">`
        ];

        return tags;
    }

    optimizeContent(content: string): string {
        // Add semantic HTML structure
        let optimizedContent = content;

        // Convert markdown headers to proper HTML with semantic structure
        optimizedContent = optimizedContent.replace(/^# (.+)$/gm, '<h1>$1</h1>');
        optimizedContent = optimizedContent.replace(/^## (.+)$/gm, '<h2>$1</h2>');
        optimizedContent = optimizedContent.replace(/^### (.+)$/gm, '<h3>$1</h3>');

        // Add semantic sections
        optimizedContent = optimizedContent.replace(
            /<h2>(.+?)<\/h2>/g, 
            '<section><header><h2>$1</h2></header>'
        );

        // Close sections (basic implementation)
        optimizedContent = optimizedContent.replace(
            /(<section><header><h2>.+?<\/h2><\/header>[\s\S]*?)(?=<section>|$)/g,
            '$1</section>'
        );

        // Add article wrapper for main content
        if (optimizedContent.includes('<h1>')) {
            optimizedContent = `<article>${optimizedContent}</article>`;
        }

        // Optimize images (if any)
        optimizedContent = optimizedContent.replace(
            /<img([^>]*?)>/g,
            '<img$1 loading="lazy" decoding="async">'
        );

        // Add structured data for FAQ sections
        if (optimizedContent.includes('FAQ') || optimizedContent.includes('Questions')) {
            optimizedContent = this.addFAQStructuredData(optimizedContent);
        }

        return optimizedContent;
    }

    private addFAQStructuredData(content: string): string {
        // This is a simplified implementation
        // In a real scenario, you'd parse the FAQ content more thoroughly
        const faqScript = `
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": [
    {
      "@type": "Question",
      "name": "How do I get started?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Follow the installation instructions in the documentation."
      }
    }
  ]
}
</script>`;

        return content + faqScript;
    }

    generatePerformanceOptimizations(): string[] {
        return [
            // Critical CSS inlining
            '<style>/* Critical CSS will be inlined here */</style>',
            
            // Preload important resources
            '<link rel="preload" href="assets/styles.css" as="style">',
            '<link rel="preload" href="assets/main.js" as="script">',
            
            // Resource hints
            '<link rel="prefetch" href="about.html">',
            '<link rel="prefetch" href="faq.html">',
            
            // Service worker registration
            `<script>
                if ('serviceWorker' in navigator) {
                    window.addEventListener('load', function() {
                        navigator.serviceWorker.register('/sw.js');
                    });
                }
            </script>`
        ];
    }

    generateServiceWorker(): string {
        return `// Service Worker for LumosGen generated website
const CACHE_NAME = 'lumosgen-v1';
const urlsToCache = [
    '/',
    '/assets/styles.css',
    '/assets/main.js',
    '/about.html',
    '/faq.html'
];

self.addEventListener('install', function(event) {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(function(cache) {
                return cache.addAll(urlsToCache);
            })
    );
});

self.addEventListener('fetch', function(event) {
    event.respondWith(
        caches.match(event.request)
            .then(function(response) {
                if (response) {
                    return response;
                }
                return fetch(event.request);
            }
        )
    );
});`;
    }
}
