import axios from 'axios';
import * as vscode from 'vscode';
import { getConfig } from './config/SimpleConfig';

export interface FileContext {
  path: string;
  content: string;
  lastModified: Date;
}

export interface GenerationRequest {
  template: string;
  context: FileContext[];
  prompt?: string;
}

export interface GenerationResponse {
  content: string;
  metadata: {
    model: string;
    tokens?: number;
    timestamp: string;
  };
}

export class AIClient {
  private outputChannel: vscode.OutputChannel;

  constructor(outputChannel: vscode.OutputChannel) {
    this.outputChannel = outputChannel;
  }

  public async generateContent(request: GenerationRequest): Promise<GenerationResponse> {
    const config = getConfig();
    
    this.outputChannel.appendLine(`[${new Date().toISOString()}] Starting content generation...`);
    this.outputChannel.appendLine(`Template: ${request.template}`);
    this.outputChannel.appendLine(`Context files: ${request.context.length}`);

    if (config.aiService.type === 'mock') {
      return this.generateMockContent(request);
    } else if (config.aiService.type === 'openai') {
      return this.generateOpenAIContent(request);
    } else {
      throw new Error(`Unsupported AI service type: ${config.aiService.type}`);
    }
  }

  private async generateMockContent(request: GenerationRequest): Promise<GenerationResponse> {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    const contextSummary = request.context.map(file => 
      `- **${file.path}**: ${file.content.substring(0, 100)}...`
    ).join('\n');

    let content = '';
    
    switch (request.template) {
      case 'summary':
        content = `# LumosGen Content Summary

Generated on: ${new Date().toLocaleString()}

## Files Analyzed
${contextSummary}

## Summary
This is a mock summary of the analyzed files. The content includes ${request.context.length} file(s) with various topics and information.

## Key Points
- Total files processed: ${request.context.length}
- Last update: ${new Date().toLocaleString()}
- Generated by: LumosGen AI Assistant

---
*This content was automatically generated by LumosGen.*`;
        break;
        
      case 'toc':
        content = `# Table of Contents

Generated on: ${new Date().toLocaleString()}

${request.context.map((file, index) => 
  `${index + 1}. [${file.path}](#${file.path.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase()})`
).join('\n')}

---
*This table of contents was automatically generated by LumosGen.*`;
        break;
        
      default:
        content = `# Generated Content

This is mock content generated by LumosGen for template: ${request.template}

Files processed: ${request.context.length}
Generated at: ${new Date().toLocaleString()}`;
    }

    return {
      content,
      metadata: {
        model: 'mock-model',
        timestamp: new Date().toISOString()
      }
    };
  }

  private async generateOpenAIContent(request: GenerationRequest): Promise<GenerationResponse> {
    const config = getConfig();
    
    const prompt = this.buildPrompt(request);
    
    try {
      const response = await axios.post(
        config.aiService.endpoint,
        {
          model: config.aiService.model,
          messages: [
            {
              role: 'system',
              content: 'You are LumosGen, an AI assistant that helps generate content summaries and documentation.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 2000,
          temperature: 0.7
        },
        {
          headers: {
            'Authorization': `Bearer ${config.aiService.apiKey}`,
            'Content-Type': 'application/json'
          }
        }
      );

      const content = response.data.choices[0].message.content;
      
      return {
        content,
        metadata: {
          model: config.aiService.model,
          tokens: response.data.usage?.total_tokens,
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      this.outputChannel.appendLine(`Error calling OpenAI API: ${error}`);
      throw new Error(`Failed to generate content: ${error}`);
    }
  }

  private buildPrompt(request: GenerationRequest): string {
    const contextText = request.context.map(file => 
      `File: ${file.path}\nContent:\n${file.content}\n---\n`
    ).join('\n');

    const templateInstructions = {
      summary: 'Generate a comprehensive summary of the provided files.',
      toc: 'Generate a table of contents based on the provided files.',
      changelog: 'Generate a changelog based on the changes in the provided files.'
    };

    return `${templateInstructions[request.template as keyof typeof templateInstructions]}

Context files:
${contextText}

Please generate well-formatted Markdown content.`;
  }
}
