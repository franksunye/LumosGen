import * as vscode from 'vscode';
import { ProjectAnalysis } from '../analysis/ProjectAnalyzer';
import { t } from '../i18n';

export interface GeneratedContent {
    homepage: string;
    aboutPage: string;
    blogPost?: string;
    faq: string;
    metadata: {
        title: string;
        description: string;
        keywords: string[];
        author: string;
        language: string;
    };
}

export interface ContentGenerationOptions {
    tone: 'professional' | 'casual' | 'technical' | 'friendly';
    includeCodeExamples: boolean;
    targetMarkets: string[];
    seoOptimization: boolean;
    language: string;
}

export class MarketingContentGenerator {
    private outputChannel: vscode.OutputChannel;
    private aiService: any;

    constructor(outputChannel: vscode.OutputChannel) {
        this.outputChannel = outputChannel;
        this.aiService = this.initializeAIService();
    }

    private initializeAIService() {
        const config = vscode.workspace.getConfiguration('lumosGen');
        const aiServiceConfig = config.get('aiService') as any;
        
        // For MVP, we'll use a mock AI service that generates realistic content
        // In production, this would integrate with OpenAI, Anthropic, etc.
        return {
            type: aiServiceConfig?.type || 'mock',
            endpoint: aiServiceConfig?.endpoint || '',
            apiKey: aiServiceConfig?.apiKey || '',
            model: aiServiceConfig?.model || 'gpt-4o-mini'
        };
    }

    async generateMarketingContent(
        analysis: ProjectAnalysis, 
        options: ContentGenerationOptions
    ): Promise<GeneratedContent> {
        this.outputChannel.appendLine(t('content.generatingHomepage'));

        try {
            const content: GeneratedContent = {
                homepage: await this.generateHomepage(analysis, options),
                aboutPage: await this.generateAboutPage(analysis, options),
                faq: await this.generateFAQ(analysis, options),
                metadata: this.generateMetadata(analysis, options)
            };

            // Optionally generate blog post
            if (analysis.features.length > 3) {
                this.outputChannel.appendLine(t('content.generatingBlog'));
                content.blogPost = await this.generateBlogPost(analysis, options);
            }

            this.outputChannel.appendLine(t('content.contentReady'));
            return content;

        } catch (error: any) {
            this.outputChannel.appendLine(`Content generation failed: ${error}`);
            throw new Error(t('content.contentFailed', { error: error?.message || error }));
        }
    }

    private async generateHomepage(analysis: ProjectAnalysis, options: ContentGenerationOptions): Promise<string> {
        // For MVP, generate realistic marketing homepage content
        const projectName = analysis.metadata.name;
        const description = analysis.metadata.description || 'An innovative software project';
        const techStack = analysis.techStack.map(t => t.language).join(', ');
        const features = analysis.features.slice(0, 6);

        const heroSection = this.generateHeroSection(projectName, description, analysis);
        const featuresSection = this.generateFeaturesSection(features, options);
        const techStackSection = this.generateTechStackSection(analysis.techStack);
        const ctaSection = this.generateCTASection(analysis, options);

        return `# ${projectName}

${heroSection}

## ‚ú® Key Features

${featuresSection}

## üõ†Ô∏è Built With

${techStackSection}

${ctaSection}

---

*Generated by LumosGen Marketing AI*`;
    }

    private generateHeroSection(projectName: string, description: string, analysis: ProjectAnalysis): string {
        const valueProps = analysis.valuePropositions.slice(0, 2);
        const audience = analysis.targetAudience.join(' and ');

        return `> **${description}**

**${projectName}** is designed for ${audience.toLowerCase()} who want to ${valueProps.join(' and ').toLowerCase()}.

üéØ **Perfect for:** ${analysis.targetAudience.join(', ')}  
üìà **Marketing Potential:** ${Math.round(analysis.marketingPotential * 100)}%  
‚≠ê **Why Choose ${projectName}:** ${valueProps[0] || 'Innovative solution for modern development'}`;
    }

    private generateFeaturesSection(features: any[], options: ContentGenerationOptions): string {
        if (features.length === 0) {
            return `- üöÄ **High Performance** - Optimized for speed and efficiency
- üîß **Easy to Use** - Simple setup and intuitive interface  
- üåç **Cross-Platform** - Works across different environments
- üîí **Secure** - Built with security best practices
- üì± **Responsive** - Adapts to different screen sizes
- üé® **Customizable** - Flexible configuration options`;
        }

        return features.map((feature, index) => {
            const icons = ['üöÄ', 'üîß', 'üåç', 'üîí', 'üì±', 'üé®'];
            const icon = icons[index % icons.length];
            const name = feature.name || `Feature ${index + 1}`;
            const desc = feature.description || 'Advanced functionality for better user experience';
            
            return `- ${icon} **${name}** - ${desc}`;
        }).join('\n');
    }

    private generateTechStackSection(techStack: any[]): string {
        if (techStack.length === 0) {
            return 'Modern technology stack for reliable performance.';
        }

        const techByCategory = techStack.reduce((acc, tech) => {
            const category = tech.category || 'general';
            if (!acc[category]) acc[category] = [];
            acc[category].push(tech);
            return acc;
        }, {} as any);

        let result = '';
        Object.entries(techByCategory).forEach(([category, techs]) => {
            const categoryName = category.charAt(0).toUpperCase() + category.slice(1);
            const techArray = techs as any[];
            const techList = techArray.map(t => `**${t.language}**${t.framework ? ` (${t.framework})` : ''}`).join(', ');
            result += `- **${categoryName}:** ${techList}\n`;
        });

        return result.trim();
    }

    private generateCTASection(analysis: ProjectAnalysis, options: ContentGenerationOptions): string {
        const repoUrl = analysis.metadata.repositoryUrl || '#';
        const projectName = analysis.metadata.name;

        return `## üöÄ Get Started

Ready to try ${projectName}? Here's how to get started:

### Quick Start
\`\`\`bash
# Clone the repository
git clone ${repoUrl}

# Install dependencies
npm install  # or your package manager

# Start using ${projectName}
npm start
\`\`\`

### üìö Documentation
- [Installation Guide](./docs/installation.md)
- [API Reference](./docs/api.md)
- [Examples](./examples/)

### ü§ù Contributing
We welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.

### üìû Support
- üêõ [Report Issues](${repoUrl}/issues)
- üí¨ [Discussions](${repoUrl}/discussions)
- üìß [Contact Us](mailto:support@example.com)`;
    }

    private async generateAboutPage(analysis: ProjectAnalysis, options: ContentGenerationOptions): Promise<string> {
        const projectName = analysis.metadata.name;
        const description = analysis.metadata.description || 'An innovative software project';
        const features = analysis.features;
        const techStack = analysis.techStack;

        return `# About ${projectName}

## üéØ Project Overview

${description}

${projectName} was created to address the needs of ${analysis.targetAudience.join(' and ').toLowerCase()}. Our mission is to provide a powerful, yet easy-to-use solution that enhances productivity and delivers exceptional results.

## üèóÔ∏è Architecture & Design

### Core Principles
- **Simplicity First** - Easy to understand and use
- **Performance Optimized** - Built for speed and efficiency  
- **Extensible** - Designed to grow with your needs
- **Reliable** - Thoroughly tested and battle-proven

### Technical Architecture
${this.generateTechStackSection(techStack)}

## üìã Detailed Features

${features.map((feature, index) => `### ${index + 1}. ${feature.name}
${feature.description}

**Category:** ${feature.category}  
**Importance:** ${Math.round(feature.importance * 100)}%`).join('\n\n')}

## üéØ Target Audience

${projectName} is specifically designed for:

${analysis.targetAudience.map(audience => `- **${audience}** - Professionals who need reliable and efficient tools`).join('\n')}

## üöÄ Getting Started

### Prerequisites
- Basic knowledge of ${techStack[0]?.language || 'programming'}
- Development environment setup
- ${techStack[0]?.framework ? `${techStack[0].framework} framework` : 'Required dependencies'}

### Installation
Please refer to our [Installation Guide](./docs/installation.md) for detailed setup instructions.

## ü§ù Community & Support

Join our growing community of developers and users:

- **GitHub Repository** - Star, fork, and contribute
- **Issue Tracker** - Report bugs and request features  
- **Discussions** - Ask questions and share ideas
- **Documentation** - Comprehensive guides and tutorials

---

*This page was generated by LumosGen Marketing AI to help showcase your project to the global developer community.*`;
    }

    private async generateBlogPost(analysis: ProjectAnalysis, options: ContentGenerationOptions): Promise<string> {
        const projectName = analysis.metadata.name;
        const mainTech = analysis.techStack[0];
        const topFeature = analysis.features[0];

        return `# Building ${projectName}: A Developer's Journey

*Published on ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}*

## Introduction

When we set out to build ${projectName}, we had a clear vision: create a tool that would ${analysis.valuePropositions[0]?.toLowerCase() || 'solve real-world problems for developers'}. Today, I'm excited to share our journey and the technical decisions that shaped this project.

## The Problem We're Solving

${analysis.metadata.description || 'Every developer faces challenges that require innovative solutions'}. We identified key pain points in the ${analysis.targetAudience[0]?.toLowerCase() || 'developer'} workflow:

- Complexity in existing solutions
- Lack of modern tooling
- Poor developer experience
- Limited customization options

## Technical Approach

### Why ${mainTech?.language || 'Our Tech Stack'}?

We chose ${mainTech?.language || 'our technology stack'} for several reasons:

1. **Performance** - ${mainTech?.language || 'Our chosen technology'} offers excellent performance characteristics
2. **Ecosystem** - Rich ecosystem of libraries and tools
3. **Community** - Strong community support and active development
4. **Future-proof** - Long-term viability and continued evolution

${mainTech?.framework ? `### ${mainTech.framework} Framework

We leveraged ${mainTech.framework} to accelerate development while maintaining code quality and maintainability.` : ''}

## Key Implementation Details

### ${topFeature?.name || 'Core Feature'}

${topFeature?.description || 'One of our most important features required careful design and implementation.'}

\`\`\`${mainTech?.language?.toLowerCase() || 'javascript'}
// Example implementation
function ${topFeature?.name?.replace(/\s+/g, '') || 'coreFeature'}() {
    // Implementation details
    return {
        status: 'success',
        message: 'Feature working as expected'
    };
}
\`\`\`

## Lessons Learned

Building ${projectName} taught us valuable lessons:

1. **Start Simple** - Begin with core functionality and iterate
2. **User Feedback** - Early user feedback is invaluable
3. **Documentation** - Good docs are as important as good code
4. **Testing** - Comprehensive testing saves time in the long run

## What's Next?

We're continuously improving ${projectName} based on user feedback and emerging needs. Upcoming features include:

${analysis.features.slice(1, 4).map((feature, index) => `- ${feature.name} - ${feature.description}`).join('\n')}

## Get Involved

${projectName} is open source and we welcome contributions! Whether you're fixing bugs, adding features, or improving documentation, every contribution helps make the project better.

- **GitHub**: [${analysis.metadata.repositoryUrl || 'Repository URL'}](${analysis.metadata.repositoryUrl || '#'})
- **Issues**: Report bugs and request features
- **Discussions**: Join the conversation

## Conclusion

Building ${projectName} has been an incredible journey. We're proud of what we've accomplished and excited about the future. Try it out and let us know what you think!

---

*Want to generate marketing content for your project? Check out [LumosGen](https://github.com/franksunye/LumosGen) - the AI-powered marketing content generator for developers.*`;
    }

    private async generateFAQ(analysis: ProjectAnalysis, options: ContentGenerationOptions): Promise<string> {
        const projectName = analysis.metadata.name;
        const mainTech = analysis.techStack[0];

        return `# Frequently Asked Questions

## General Questions

### What is ${projectName}?
${analysis.metadata.description || `${projectName} is an innovative software solution designed to help developers be more productive.`}

### Who is ${projectName} for?
${projectName} is designed for ${analysis.targetAudience.join(', ').toLowerCase()}. Whether you're a beginner or an experienced professional, ${projectName} can help streamline your workflow.

### Is ${projectName} free to use?
${projectName} is open source and free to use. You can find the source code on [GitHub](${analysis.metadata.repositoryUrl || '#'}).

## Technical Questions

### What technologies does ${projectName} use?
${projectName} is built with ${analysis.techStack.map(t => t.language).join(', ')}. ${mainTech?.framework ? `We use ${mainTech.framework} as our primary framework.` : ''}

### What are the system requirements?
- ${mainTech?.language || 'Runtime environment'} (latest stable version recommended)
- Operating System: Windows, macOS, or Linux
- Memory: 4GB RAM minimum, 8GB recommended
- Storage: 100MB available space

### How do I install ${projectName}?
Please refer to our [Installation Guide](./docs/installation.md) for detailed setup instructions.

## Usage Questions

### How do I get started?
1. Install ${projectName} following our installation guide
2. Run the initial setup command
3. Check out our [Quick Start Guide](./docs/quickstart.md)
4. Explore the examples in the \`examples/\` directory

### Can I customize ${projectName}?
Yes! ${projectName} is designed to be highly customizable. You can:
- Configure settings through the configuration file
- Extend functionality with plugins
- Modify the source code (it's open source!)

### Does ${projectName} support multiple platforms?
${projectName} supports all major platforms including Windows, macOS, and Linux.

## Troubleshooting

### ${projectName} won't start
1. Check that all dependencies are installed
2. Verify your ${mainTech?.language || 'runtime'} version
3. Check the logs for error messages
4. Try reinstalling ${projectName}

### Performance issues
- Ensure you have sufficient system resources
- Check for conflicting software
- Update to the latest version
- Consider adjusting configuration settings

### Getting help
If you can't find the answer to your question:
- Check our [Documentation](./docs/)
- Search existing [Issues](${analysis.metadata.repositoryUrl || '#'}/issues)
- Ask in [Discussions](${analysis.metadata.repositoryUrl || '#'}/discussions)
- Contact our support team

## Contributing

### How can I contribute?
We welcome all types of contributions:
- Bug reports and feature requests
- Code contributions
- Documentation improvements
- Community support

### Development setup
See our [Contributing Guide](./CONTRIBUTING.md) for detailed information on setting up a development environment.

---

*Don't see your question here? Feel free to [ask in our discussions](${analysis.metadata.repositoryUrl || '#'}/discussions) or [open an issue](${analysis.metadata.repositoryUrl || '#'}/issues).*`;
    }

    private generateMetadata(analysis: ProjectAnalysis, options: ContentGenerationOptions) {
        return {
            title: `${analysis.metadata.name} - ${analysis.metadata.description || 'Innovative Software Solution'}`,
            description: analysis.metadata.description || `${analysis.metadata.name} is designed for ${analysis.targetAudience.join(' and ').toLowerCase()}`,
            keywords: [
                analysis.metadata.name.toLowerCase(),
                ...analysis.techStack.map(t => t.language.toLowerCase()),
                ...analysis.targetAudience.map(a => a.toLowerCase().replace(/\s+/g, '-')),
                'open-source',
                'developer-tools',
                'software'
            ],
            author: analysis.metadata.author || 'LumosGen User',
            language: options.language
        };
    }
}
